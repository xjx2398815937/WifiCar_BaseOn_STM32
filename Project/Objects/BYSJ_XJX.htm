<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BYSJ_XJX.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BYSJ_XJX.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Jun 25 11:36:04 2019
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ImagDataSentToPhone &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from stm32f10x_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">fputc</a> from usart.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[56]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagDataSentToPhone
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[fa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[52]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[fd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>Advance</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(i.Advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Advance
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>Back</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(i.Back))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Back
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Delay_Ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ultrasonic.o(i.Delay_Ms))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEchoTimer
</UL>

<P><STRONG><a name="[66]"></a>Delay_Us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ultrasonic.o(i.Delay_Us))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GenerateSWInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
</UL>

<P><STRONG><a name="[5d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
</UL>

<P><STRONG><a name="[e5]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
</UL>

<P><STRONG><a name="[61]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[67]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[58]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Advance
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_set
</UL>

<P><STRONG><a name="[59]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Advance
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_set
</UL>

<P><STRONG><a name="[62]"></a>GetEchoTimer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ultrasonic.o(i.GetEchoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetEchoTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Hcsr04GetLength</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ultrasonic.o(i.Hcsr04GetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcsr04GetLength &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEchoTimer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Us
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTimerForHc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTimerForHc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Length
</UL>

<P><STRONG><a name="[69]"></a>Hcsr04Init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ultrasonic.o(i.Hcsr04Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hcsr04Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_NVIC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init1
</UL>

<P><STRONG><a name="[70]"></a>Hcsr04Init1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ultrasonic.o(i.Hcsr04Init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hcsr04Init1 &rArr; Hcsr04Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_NVIC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[71]"></a>ImagDataSentToPhone</STRONG> (Thumb, 140 bytes, Stack size 672 bytes, ov7725.o(i.ImagDataSentToPhone))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ImagDataSentToPhone &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, main.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Init &rArr; WifiConfig &rArr; M8266WIFI_Module_Init_Via_SPI &rArr; M8266WIFI_SPI_STA_Connect_Ap &rArr; M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_GPIO_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Contrast
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Color_Saturation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>LED_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[84]"></a>LED_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, led.o(i.LED_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_set
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[85]"></a>Left</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(i.Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Left
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Length</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ultrasonic.o(i.Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Length &rArr; Hcsr04GetLength &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>M8266HostIf_GPIO_CS_RESET_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_GPIO_CS_RESET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266HostIf_GPIO_CS_RESET_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
</UL>

<P><STRONG><a name="[88]"></a>M8266HostIf_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M8266HostIf_Init &rArr; M8266HostIf_SPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[c3]"></a>M8266HostIf_SPI_DMA_StartReceiveSendData</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_DMA_StartReceiveSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
</UL>

<P><STRONG><a name="[89]"></a>M8266HostIf_SPI_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M8266HostIf_SPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
</UL>

<P><STRONG><a name="[8e]"></a>M8266HostIf_SPI_Select</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M8266HostIf_SPI_Select &rArr; M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[90]"></a>M8266HostIf_SPI_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_SPI_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266HostIf_SPI_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[c1]"></a>M8266HostIf_SPI_rrs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_rrs))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>

<P><STRONG><a name="[c2]"></a>M8266HostIf_SPI_wrs</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_wrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266HostIf_SPI_wrs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>

<P><STRONG><a name="[94]"></a>M8266HostIf_Set_SPI_nCS_Pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Set_SPI_nCS_Pin))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[96]"></a>M8266HostIf_Set_nRESET_Pin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Set_nRESET_Pin))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[91]"></a>M8266HostIf_delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266HostIf_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wssrd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[93]"></a>M8266WIFI_Module_Hardware_Reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266WIFI_Module_Hardware_Reset &rArr; M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_nRESET_Pin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[97]"></a>M8266WIFI_Module_Init_Via_SPI</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_Init_Via_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = M8266WIFI_Module_Init_Via_SPI &rArr; M8266WIFI_SPI_STA_Connect_Ap &rArr; M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_Web_Server
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_SetSpeed
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[95]"></a>M8266WIFI_Module_delay_ms</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[a1]"></a>M8266WIFI_SPI_Config_STA_Param</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Config_STA_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = M8266WIFI_SPI_Config_STA_Param &rArr; M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[a3]"></a>M8266WIFI_SPI_Get_Module_Info</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_Module_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M8266WIFI_SPI_Get_Module_Info &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[9b]"></a>M8266WIFI_SPI_Get_Opmode</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_Get_Opmode &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[9f]"></a>M8266WIFI_SPI_Get_STA_Connection_Status</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_STA_Connection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[a8]"></a>M8266WIFI_SPI_Get_STA_IP_Addr</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_STA_IP_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_Get_STA_IP_Addr &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
</UL>

<P><STRONG><a name="[a9]"></a>M8266WIFI_SPI_Has_DataReceived</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Has_DataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_Has_DataReceived &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>M8266WIFI_SPI_Interface_Communication_OK</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Interface_Communication_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266WIFI_SPI_Interface_Communication_OK &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[99]"></a>M8266WIFI_SPI_Interface_Communication_Stress_Test</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Interface_Communication_Stress_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_Interface_Communication_Stress_Test &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[ac]"></a>M8266WIFI_SPI_Query_Connection</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Query_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[ad]"></a>M8266WIFI_SPI_Recv</STRONG> (Thumb, 598 bytes, Stack size 96 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sbis
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
</UL>

<P><STRONG><a name="[b5]"></a>M8266WIFI_SPI_RecvData</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>M8266WIFI_SPI_STA_Connect_Ap</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_STA_Connect_Ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = M8266WIFI_SPI_STA_Connect_Ap &rArr; M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_STA_Param
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[b7]"></a>M8266WIFI_SPI_STA_Connect_Ap_Old</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_STA_Connect_Ap_Old))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[a0]"></a>M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[73]"></a>M8266WIFI_SPI_Send_Data</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wssrd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagDataSentToPhone
</UL>

<P><STRONG><a name="[9a]"></a>M8266WIFI_SPI_Set_Opmode</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Set_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_Set_Opmode &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[bd]"></a>M8266WIFI_SPI_Setup_Connection</STRONG> (Thumb, 482 bytes, Stack size 120 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Setup_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = M8266WIFI_SPI_Setup_Connection &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[bf]"></a>M8266WIFI_SPI_Slave_Has_Response</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Slave_Has_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_Slave_Has_Response &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
</UL>

<P><STRONG><a name="[b4]"></a>M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[c0]"></a>M8266WIFI_SPI_TxdBuffer_Free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_TxdBuffer_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_TxdBuffer_Free &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
</UL>

<P><STRONG><a name="[a2]"></a>M8266WIFI_SPI_capstp</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_capstp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_STA_Param
</UL>

<P><STRONG><a name="[a5]"></a>M8266WIFI_SPI_csb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_csb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_csb &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_Web_Server
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
</UL>

<P><STRONG><a name="[ab]"></a>M8266WIFI_SPI_rra</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_rra))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_rra &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
</UL>

<P><STRONG><a name="[b2]"></a>M8266WIFI_SPI_rru</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_rru))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_rru &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b1]"></a>M8266WIFI_SPI_rrud</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_rrud))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M8266WIFI_SPI_rrud &rArr; M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_DMA_StartReceiveSendData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b3]"></a>M8266WIFI_SPI_sbis</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_sbis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_sbis &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[a7]"></a>M8266WIFI_SPI_srh</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_srh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_Web_Server
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
</UL>

<P><STRONG><a name="[aa]"></a>M8266WIFI_SPI_ssa</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wssrd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tuis
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tufs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sbis
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_TxdBuffer_Free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Slave_Has_Response
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[a6]"></a>M8266WIFI_SPI_ssb</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M8266WIFI_SPI_ssb &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_Web_Server
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
</UL>

<P><STRONG><a name="[8f]"></a>M8266WIFI_SPI_ssmd</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[c4]"></a>M8266WIFI_SPI_ssu</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_ssu
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[b9]"></a>M8266WIFI_SPI_ssud</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssud))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M8266WIFI_SPI_ssud &rArr; M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_DMA_StartReceiveSendData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>

<P><STRONG><a name="[ba]"></a>M8266WIFI_SPI_ssut</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_ssut
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>

<P><STRONG><a name="[c6]"></a>M8266WIFI_SPI_tufs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_tufs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
</UL>

<P><STRONG><a name="[c7]"></a>M8266WIFI_SPI_tuis</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_tuis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266WIFI_SPI_tuis &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wssrd
</UL>

<P><STRONG><a name="[9d]"></a>M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m8266wifi_ops.o(i.M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip &rArr; M8266WIFI_SPI_Get_STA_IP_Addr &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[a4]"></a>M8266WIFI_SPI_wscbf</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wscbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M8266WIFI_SPI_wscbf &rArr; M8266WIFI_SPI_TxdBuffer_Free &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_TxdBuffer_Free
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_Web_Server
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
</UL>

<P><STRONG><a name="[c5]"></a>M8266WIFI_SPI_wscr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wscr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M8266WIFI_SPI_wscr &rArr; M8266WIFI_SPI_Slave_Has_Response &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Slave_Has_Response
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[af]"></a>M8266WIFI_SPI_wspsr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wspsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wspsr &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b8]"></a>M8266WIFI_SPI_wspss</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wspss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wspss &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>

<P><STRONG><a name="[b0]"></a>M8266WIFI_SPI_wsscbhud</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wsscbhud))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wsscbhud &rArr; M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[ae]"></a>M8266WIFI_SPI_wsscrhd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wsscrhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wsscrhd &rArr; M8266WIFI_SPI_Has_DataReceived &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[bb]"></a>M8266WIFI_SPI_wssrd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wssrd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wssrd &rArr; M8266WIFI_SPI_tuis &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tuis
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>

<P><STRONG><a name="[bc]"></a>M8266WIFI_Wait_SPI_sfad</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_Wait_SPI_sfad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tufs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>Motor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motor.o(i.Motor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_Enable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[78]"></a>Motor_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_NVIC
</UL>

<P><STRONG><a name="[e8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_NVIC
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[81]"></a>OV7725_Brightness</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ov7725.o(i.OV7725_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7725_Brightness &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[80]"></a>OV7725_Color_Saturation</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Color_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV7725_Color_Saturation &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[82]"></a>OV7725_Contrast</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV7725_Contrast &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[7c]"></a>OV7725_GPIO_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV7725_GPIO_Config &rArr; VSYNC_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[7d]"></a>OV7725_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ov7725.o(i.OV7725_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7725_Init &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[7f]"></a>OV7725_Light_Mode</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Light_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV7725_Light_Mode &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[7e]"></a>OV7725_Special_Effect</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Special_Effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV7725_Special_Effect &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[83]"></a>OV7725_Window_Set</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ov7725.o(i.OV7725_Window_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OV7725_Window_Set &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>

<P><STRONG><a name="[e1]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[60]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[8b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[e4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[ce]"></a>Right</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(i.Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Right
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>SCCB_GPIO_Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sccb.o(i.SCCB_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_GPIO_Config
</UL>

<P><STRONG><a name="[cc]"></a>SCCB_ReadByte</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sccb.o(i.SCCB_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_ReadByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[c9]"></a>SCCB_WriteByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Contrast
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Color_Saturation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
</UL>

<P><STRONG><a name="[8d]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_SetSpeed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[8c]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[be]"></a>SPI_STA_Get_HostIP_by_HostName</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, m8266wifidrv.o(i.SPI_STA_Get_HostIP_by_HostName))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[9e]"></a>SPI_Set_Web_Server</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, m8266wifidrv.o(i.SPI_Set_Web_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_Set_Web_Server &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(i.Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>TIM3_PWM_Init</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, motor.o(i.TIM3_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM3_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[6d]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTimerForHc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTimerForHc
</UL>

<P><STRONG><a name="[6b]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>

<P><STRONG><a name="[63]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEchoTimer
</UL>

<P><STRONG><a name="[df]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>

<P><STRONG><a name="[da]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[db]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[dc]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[dd]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[cd]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTimerForHc
</UL>

<P><STRONG><a name="[6c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>

<P><STRONG><a name="[e3]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[75]"></a>USART_Config</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[f0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[e2]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[ef]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>WifiConfig</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, wifi.o(i.WifiConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WifiConfig &rArr; M8266WIFI_Module_Init_Via_SPI &rArr; M8266WIFI_SPI_STA_Connect_Ap &rArr; M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[ec]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[76]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ea]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[eb]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConfig
</UL>

<P><STRONG><a name="[92]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[b6]"></a>fvcp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, m8266wifidrv.o(i.fvcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fvcp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[6f]"></a>hcsr04_NVIC</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ultrasonic.o(i.hcsr04_NVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hcsr04_NVIC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04Init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = main &rArr; ImagDataSentToPhone &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa &rArr; M8266HostIf_SPI_wrs
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagDataSentToPhone
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Advance
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Length
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d7]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d8]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[5b]"></a>CloseTimerForHc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ultrasonic.o(i.CloseTimerForHc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseTimerForHc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[68]"></a>OpenTimerForHc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ultrasonic.o(i.OpenTimerForHc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenTimerForHc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcsr04GetLength
</UL>

<P><STRONG><a name="[5f]"></a>FIFO_GPIO_Config</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ov7725.o(i.FIFO_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FIFO_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_GPIO_Config
</UL>

<P><STRONG><a name="[cb]"></a>VSYNC_GPIO_Config</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ov7725.o(i.VSYNC_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VSYNC_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_GPIO_Config
</UL>

<P><STRONG><a name="[cf]"></a>SCCB_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d1]"></a>SCCB_NoAck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(i.SCCB_NoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d6]"></a>SCCB_ReceiveByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sccb.o(i.SCCB_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d3]"></a>SCCB_SendByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sccb.o(i.SCCB_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d2]"></a>SCCB_Start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d5]"></a>SCCB_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d4]"></a>SCCB_WaitAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sccb.o(i.SCCB_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[d0]"></a>SCCB_delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sccb.o(i.SCCB_delay))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
</UL>

<P><STRONG><a name="[ed]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
